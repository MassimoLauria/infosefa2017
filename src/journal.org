#+TITLE: Informatica @ SEFA 2017/2018 - Diario delle lezioni

Qui potete trovare  tutte le informazioni riguardo  il contenuto delle
lezioni, ed il  relativo materiale. Tenete d'occhio  questa pagina.

* <2017-10-11 Wed> Lezione 6 - Iterazione su sequenze. Il modello a oggetti.

  La lezione riguarda due temi. Il primo è fondamentale: come ripetere
  una serie di istruzioni numerose  volte, con piccole variazioni, per
  costruire programmi in  grado di effettuare un  numero di operazioni
  potenzialmente illimitato.

  Il  secondo tema  è il  paradigma a  oggetti. Come  sono strutturati
  e come si usano gli oggetti forniti dal linguaggio.

* <2017-10-09 Mon> Laboratorio 2 - Esercizi in Python

  - programma con i test: [[file:code/test_lab02.py][test_lab02.py]] 

  Più precisamente dovrete:
  - salvare le vostre funzioni in un file =lab02.py=
  - scaricare il file =test_lab02.py=
  - eseguire, nella stessa cartella che li contiene
  
  : $ python3 test_lab02.py

  Slide: ([[file:docs/lab02.pdf][schermo]]|[[file:docs/lab02-print.pdf][stampa]])

* <2017-10-06 Fri> Lezione 5 - Sequenze, liste e tuple. Moduli.

  A  lezione abbiamo  visto l'uso  di sequenze,  ed in  particolare di
  liste e  tuple. In  questo contesto abbiamo  discusso l'immutabilità
  e la mutabilità.

  *Attenzione*:  a  lezione ho  detto  una  cosa *errata*!!  Le  tuple
  possono contenere liste e queste liste possono essere modificate. 

#+BEGIN_SRC python :session :exports both :results output
tupla = (1,2,[3,4])
tupla[0] = "mod"           # modifico un elemento della tupla (Errore)
tupla[-1][0] = "mod"       # modifico un elemento della lista interna
print(tupla)
#+END_SRC

#+RESULTS:
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
: TypeError: 'tuple' object does not support item assignment
: (1, 2, ['mod', 4])
  
  La nozione  di immutabilità  delle tuple è  superficiale e  si ferma
  all'identità degli oggetti, non al loro contenuto. Ne discuteremo in
  laboratorio all'inizio della lezione. Resta  il fatto che python non
  accetta questo tipo di tuple in alcune operazioni.

#+BEGIN_SRC python :session true :exports both :results output
database = {}
database[(1,2,(3,4),5)] = "prima prova"     # associamo una stringa a (1,2,(3,4),5)
print( database[(1,2) + ((3,4),5)])         # l'indice può essere ricalcolato
database[(1,2,[3,4],5)] = "seconda prova"   # questa istruzione dà errore
#+END_SRC

#+RESULTS:
: prima prova
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
: TypeError: unhashable type: 'list'

  Slide: ([[file:docs/lecture05.pdf][schermo]]|[[file:docs/lecture05-print.pdf][stampa]])

* <2017-10-04 Wed> Lezione 4 - Logica booleana, Costrutto IF

  Abbiamo visto  i rudimenti della  logica booleana e  degli operatori
  proposizionali not, and,  or, xor. Abbiamo visto  come utilizzare le
  condizioni booleane per adoperare =if=, =else=, =elif=.

  Tutto quello che è stato fatto a lezione è sulle slide, anche se non
  siamo riusciti ad adoperarle.

  Slide: ([[file:docs/lecture04.pdf][schermo]]|[[file:docs/lecture04-print.pdf][stampa]])

* <2017-10-02 Mon> Laboratorio 1 - Primi esercizi in Python

  Dovrete scrivere  una serie  di funzioni in  python, e  salvarle sul
  file =lab01.py=  in maniera  tale che  il lo  script =test_lab01.py=
  esegua   con   successo.   *Attenzione:*  la   versione   precedente
  era errata! Scaricate l'ultima versione.

  - programma con i test: [[file:code/test_lab01.py][test_lab01.py]]  (*aggiornato*)

  Più precisamente dovrete:
  - salvare le vostre funzioni in un file =lab01.py=
  - scaricare il file =test_lab01.py=
  - eseguire, nella stessa cartella che li contiene
  
  : $ python3 test_lab01.py

  Visto che d'ora in  poi useremo molto la riga di  comando, è il caso
  che leggiate un piccolo tutorial su  come fare le operazioni di base
  come muoversi tra cartelle. [[https://tutorial.djangogirls.org/it/intro_to_command_line/][Django Girls Tutorial (italiano)]]

  Slide: ([[file:docs/lab01.pdf][schermo]]|[[file:docs/lab01-print.pdf][stampa]])

* <2017-09-29 Fri> Lezione 3 - Elementi del linguaggio Python

  Abbiamo visto  come operare  su dati numerici  (interi e  in virgola
  mobile)  e  come  operare  sulle  stringhe.  Abbiamo  introdotto  le
  /variabili/ e le /funzioni/ come meccanismi di astrazione.

  Slide: ([[file:docs/lecture03.pdf][schermo]]|[[file:docs/lecture03-print.pdf][stampa]])

* <2017-09-27 Wed> Lezione 2 - Dati e programmi

  Mi scuso per  le difficoltà iniziali della lezione di  oggi. Farò di
  tutto perché non si ripetano. 

  La lezione si è concentrata prima  sulla codifica di dati, ovvero di
  come  vengano codificati  numeri  interi in  binario e  esadecimale,
  e testi  in ASCII,  ASCII esteso,  e UTF-8.  Sono stati  fatti anche
  esempi riguardanti la codifica di immagini e segnali.

  Poi ci siamo spostati sul  tema dei programmi. Sono stati introdotti
  il linguaggio  macchina della CPU, e  si è visto come  le astrazioni
  siano strumenti  importanti per  la progettazione e  manutenzione di
  un programma.  Abbiamo introdotto il  concetto di linguaggi  di alto
  e  basso   livello,  il  concetto  di   compilatore  ed  interprete.
  Sono stati brevemente introdotti Python e SQL.

  Slide: ([[file:docs/lecture02.pdf][schermo]]|[[file:docs/lecture02-print.pdf][stampa]])

* <2017-09-25 Mon> Lezione 1 - Introduzione

  Abbiamo introdotto il corso,  fornendo le informazioni logistiche di
  base.   Poi    abbiamo   visto   alcuni   elementi    della   storia
  dell'informatica e di come sia nata l'architettura dei calcolatori.
   
  Slide: ([[file:docs/lecture01.pdf][schermo]]|[[file:docs/lecture01-print.pdf][stampa]])

